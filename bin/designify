#!/usr/bin/python
# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-
### BEGIN LICENSE
# Copyright (C) YYYY Didier Roche <didrocks@ubuntu.com>
# This program is free software: you can redistribute it and/or modify it 
# under the terms of the GNU General Public License version 3, as published 
# by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranties of 
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR 
# PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along 
# with this program.  If not, see <http://www.gnu.org/licenses/>.
### END LICENSE

from __future__ import absolute_import, unicode_literals

import logging
import optparse
import os
import sys

# Add project root directory (enable symlink, and trunk execution).
PROJECT_ROOT_DIRECTORY = os.path.abspath(
    os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))))

python_path = []
if os.path.abspath(__file__).startswith('/opt'):
    syspath = sys.path[:] # copy to avoid infinite loop in pending objects
    for path in syspath:
        opt_path = path.replace('/usr', '/opt/extras.ubuntu.com/unify')
        python_path.insert(0, opt_path)
        sys.path.insert(0, opt_path)
if (os.path.exists(os.path.join(PROJECT_ROOT_DIRECTORY, 'unify'))
    and PROJECT_ROOT_DIRECTORY not in sys.path):
    python_path.insert(0, PROJECT_ROOT_DIRECTORY)
    sys.path.insert(0, PROJECT_ROOT_DIRECTORY)
if python_path:
    os.putenv('PYTHONPATH', "%s:%s" % (os.getenv('PYTHONPATH', ''), ':'.join(python_path))) # for subprocesses

from unify import unifyconfig
from unify.bugshandler import get_bug_mastered_track_reports, log_newly_closed_bugs
from unify.dbhandler import get_db_handler
from unify.wwwgenerator import WWWGenerator

LEVELS = (  logging.ERROR,
            logging.WARNING,
            logging.INFO,
            logging.DEBUG,
            )

if __name__ == "__main__":

    version = unifyconfig.__unify_data_directory__
    # Support for command line options.
    usage = "designify [options]"
    parser = optparse.OptionParser(version="designify %s" % version, usage=usage)
    parser.add_option('-d', '--debug', dest='debug_mode', action='store_true',
        help='Print the maximum debugging info (implies -vv)')
    parser.add_option('-v', '--verbose', dest='logging_level', action='count',
        help='set error_level output to warning, info, and then debug')
                      
    parser.set_defaults(logging_level=2, foo=None)
    (options, args) = parser.parse_args()

    # set the verbosity
    if options.debug_mode:
        options.logging_level = 3
    logging.basicConfig(level=LEVELS[options.logging_level], format='%(asctime)s %(levelname)s %(message)s')
    
    design_task = "ubuntu-ux"
    db = get_db_handler()
    
    # perform operations
    (untriaged_bugs, officially_signed_off, design_on_hold, ready_to_develop_upstream,
        ready_to_develop_downstream, ready_to_land_downstream, ready_to_review, invalid_bugs) = get_bug_mastered_track_reports(design_task, db)
    log_newly_closed_bugs(design_task, db)
    
    # get closed bugs
    stat_bugs = db.get_closed_reports_by_release()
    
    # Get distro priorities
    (inconsistent_distro_priorities, officially_signed_off_priority, design_on_hold_priority, ready_to_develop_upstream_priority,
        ready_to_develop_downstream_priority, ready_to_land_downstream_priority, ready_to_review_priority, invalid_bugs) = get_bug_mastered_track_reports("unity-distro-priority", db)
        
    db.close_db()
    
    # write status
    www_gen = WWWGenerator()
    www_gen.generate_pages_workpages(untriaged_bugs, officially_signed_off, design_on_hold, ready_to_develop_upstream,
                                     ready_to_develop_downstream, ready_to_land_downstream,
                                     ready_to_review, invalid_bugs, stat_bugs,
                                     ready_to_develop_upstream_priority, ready_to_develop_downstream_priority, inconsistent_distro_priorities, ready_to_land_downstream_priority, ready_to_review_priority)
                                     
    
