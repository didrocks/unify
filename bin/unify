#!/usr/bin/python
# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-
### BEGIN LICENSE
# Copyright (C) YYYY Didier Roche <didrocks@ubuntu.com>
# This program is free software: you can redistribute it and/or modify it 
# under the terms of the GNU General Public License version 3, as published 
# by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranties of 
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR 
# PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along 
# with this program.  If not, see <http://www.gnu.org/licenses/>.
### END LICENSE

import logging
import optparse
import os
import sys


# Add project root directory (enable symlink, and trunk execution).
PROJECT_ROOT_DIRECTORY = os.path.abspath(
    os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))))

python_path = []
if os.path.abspath(__file__).startswith('/opt'):
    syspath = sys.path[:] # copy to avoid infinite loop in pending objects
    for path in syspath:
        opt_path = path.replace('/usr', '/opt/extras.ubuntu.com/unify')
        python_path.insert(0, opt_path)
        sys.path.insert(0, opt_path)
if (os.path.exists(os.path.join(PROJECT_ROOT_DIRECTORY, 'unify'))
    and PROJECT_ROOT_DIRECTORY not in sys.path):
    python_path.insert(0, PROJECT_ROOT_DIRECTORY)
    sys.path.insert(0, PROJECT_ROOT_DIRECTORY)
if python_path:
    os.putenv('PYTHONPATH', "%s:%s" % (os.getenv('PYTHONPATH', ''), ':'.join(python_path))) # for subprocesses    os.putenv('PYTHONPATH', PROJECT_ROOT_DIRECTORY) # for subprocesses

from unify import unifyconfig
from unify import milestonehandler
from unify import bugshandler

LEVELS = (  logging.ERROR,
            logging.WARNING,
            logging.INFO,
            logging.DEBUG,
            )

if __name__ == "__main__":

    version = unifyconfig.__unify_data_directory__
    # Support for command line options.
    usage = "unify [options]"
    parser = optparse.OptionParser(version="unify %s" % version, usage=usage)
    parser.add_option('-d', '--debug', dest='debug_mode', action='store_true',
        help='Print the maximum debugging info (implies -vv)')
    parser.add_option('-v', '--verbose', dest='logging_level', action='count',
        help='set error_level output to warning, info, and then debug')
    # exemple of silly CLI option
    parser.add_option("-f", "--foo", action="store", dest="foo",
                      help="foo should be assigned to bar")
    parser.set_defaults(logging_level=0, foo=None)
    (options, args) = parser.parse_args()

    # set the verbosity
    if options.debug_mode:
        options.logging_level = 3
    logging.basicConfig(level=LEVELS[options.logging_level], format='%(asctime)s %(levelname)s %(message)s')

    try:
        milestone = args[0]
    except IndexError:
        print ("Please specify a milestone for your application")
        sys.exit(1)
        
    meta_project = "unity"
    upstream_filter = ("unity", "unity-place-applications", "unity-place-files", "dee", "nux", "bamf", "libunity", "libunity-misc", "unity-asset-pool");
    downstream_filter = []
    for elem in upstream_filter:
        downstream_filter.append("%s (Ubuntu)" % elem)
        downstream_filter.append("%s (Ubuntu Natty)" % elem)
    
    # get bug tasks closed associated to the milestone
    real_milestoned_bugs = milestonehandler.getCompletedBugTasks(meta_project, milestone)
    
    # act on bugs to close upstream ones and open downstream ones
    #bugshandler.closeAllUpstreamBugs(real_milestoned_bugs, upstream_downstream_filter)
    bugshandler.openDownstreamBugsByProject(real_milestoned_bugs, meta_project, upstream_filter, downstream_filter)

    # now that all downstreams bugs are there, create the changelog
    bugshandler.getPackagesFormattedChangelogByProject(real_milestoned_bugs)

    # move them to the next milestone
    ##milestonehandler.moveOtherBugsToNextMilestone(meta_project, milestone)
